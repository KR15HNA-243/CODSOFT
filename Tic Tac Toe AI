import random

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def is_game_over(board):
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] != " ":
            return True
        if board[0][i] == board[1][i] == board[2][i] != " ":
            return True
    if board[0][0] == board[1][1] == board[2][2] != " ":
        return True
    if board[0][2] == board[1][1] == board[2][0] != " ":
        return True

    for row in board:
        if " " in row:
            return False
    return True

def evaluate_board(board):
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] == "X":
            return 1
        if board[i][0] == board[i][1] == board[i][2] == "O":
            return -1
        if board[0][i] == board[1][i] == board[2][i] == "X":
            return 1
        if board[0][i] == board[1][i] == board[2][i] == "O":
            return -1
    if board[0][0] == board[1][1] == board[2][2] == "X":
        return 1
    if board[0][0] == board[1][1] == board[2][2] == "O":
        return -1
    if board[0][2] == board[1][1] == board[2][0] == "X":
        return 1
    if board[0][2] == board[1][1] == board[2][0] == "O":
        return -1

    return 0

def minimax(board, depth, maximizing_player, alpha, beta):
    if is_game_over(board):
        return evaluate_board(board)

    if maximizing_player:
        max_eval = -float("inf")
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "X"
                    eval = minimax(board, depth + 1, False, alpha, beta)
                    board[i][j] = " "
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break
        return max_eval
    else:
        min_eval = float("inf")
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "O"
                    eval = minimax(board, depth + 1, True, alpha, beta)
                    board[i][j] = " "
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha:
                        break
        return min_eval

def ai_move(board):
    best_eval = -float("inf")
    best_move = None
    alpha = -float("inf")
    beta = float("inf")

    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                board[i][j] = "X"
                eval = minimax(board, 0, False, alpha, beta)
                board[i][j] = " "
                if eval > best_eval:
                    best_eval = eval
                    best_move = (i, j)

    return best_move

if __name__ == "__main__":
    board = [[" " for _ in range(3)] for _ in range(3)]
    print("Welcome to Tic-Tac-Toe!")

    while True:
        print_board(board)
        row, col = map(int, input("Enter your move (row and column, separated by a space): ").split())
        
        if board[row][col] != " ":
            print("Invalid move. Try again.")
            continue
        
        board[row][col] = "O"
        
        if is_game_over(board):
            print_board(board)
            print("You win!")
            break
        
        ai_row, ai_col = ai_move(board)
        board[ai_row][ai_col] = "X"
        
        if is_game_over(board):
            print_board(board)
            print("AI wins!")
            break
        
        if " " not in board[0] and " " not in board[1] and " " not in board[2]:
            print_board(board)
            print("It's a tie!")
            break
